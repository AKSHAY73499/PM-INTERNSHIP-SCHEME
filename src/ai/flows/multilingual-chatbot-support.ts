// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A multilingual chatbot support AI agent.
 *
 * - multilingualChatbot - A function that handles the chatbot interaction.
 * - MultilingualChatbotInput - The input type for the multilingualChatbot function.
 * - MultilingualChatbotOutput - The return type for the multilingualChatbot function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const MultilingualChatbotInputSchema = z.object({
  language: z.enum(['en', 'kn', 'hi']).describe('The language of the user message (en: English, kn: Kannada, hi: Hindi).'),
  message: z.string().describe('The user message in the specified language.'),
});
export type MultilingualChatbotInput = z.infer<typeof MultilingualChatbotInputSchema>;

const MultilingualChatbotOutputSchema = z.object({
  response: z.string().describe('The chatbot response in the same language as the input message.'),
});
export type MultilingualChatbotOutput = z.infer<typeof MultilingualChatbotOutputSchema>;

export async function multilingualChatbot(input: MultilingualChatbotInput): Promise<MultilingualChatbotOutput> {
  return multilingualChatbotFlow(input);
}

const prompt = ai.definePrompt({
  name: 'multilingualChatbotPrompt',
  input: {schema: MultilingualChatbotInputSchema},
  output: {schema: MultilingualChatbotOutputSchema},
  prompt: `You are a multilingual chatbot that supports Kannada, Hindi, and English. Respond to the user message in the same language as the input message.

Language: {{{language}}}
Message: {{{message}}}

Response:`,
});

const multilingualChatbotFlow = ai.defineFlow(
  {
    name: 'multilingualChatbotFlow',
    inputSchema: MultilingualChatbotInputSchema,
    outputSchema: MultilingualChatbotOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
